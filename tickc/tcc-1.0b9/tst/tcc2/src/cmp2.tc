#include <stdio.h>
#include "benchmark.h"

typedef void cspec (*vptr)();
typedef unsigned cspec (*uptr)(unsigned cspec);
struct pipe {
  vptr initial;
  vptr pipe;
  vptr final;
};
typedef void (*pipetype)(unsigned,unsigned*,unsigned*);
typedef void (*Vptr)();
typedef unsigned (*Uptr)(unsigned);
struct Pipe {
  Vptr initial;
  Uptr pipe;
  Vptr final;
};

unsigned vspec q;
unsigned vspec ck;

/* ====================================================================== */

void cspec i0 () { return `{ ck = 0; }; }
void cspec p0 () { return `{ @ck += @q; }; }
void cspec f0 () { return `{}; }

void cspec i1 () { return `{ q = 0; }; }
void cspec p1 () { 
     return `{ @q = ((@q << 24) | ((@q & 0xff00) << 8) |
		     ((@q >> 8) & 0xff00) | ((@q  >> 24) & 0xff)); };
}
void cspec f1 () { return `{}; }

#ifdef largetickc
void cspec i2 () { return `{ q = 0; }; }
void cspec p2 () { 
     return `{ @q = ((@q << 24) | ((@q & 0xff00) << 8) |
		     ((@q >> 8) & 0xff00) | ((@q  >> 24) & 0xff)); };
}
void cspec f2 () { return `{}; }

void cspec i3 () { return `{ q = 0; }; }
void cspec p3 () { 
     return `{ @q = ((@q << 24) | ((@q & 0xff00) << 8) |
		     ((@q >> 8) & 0xff00) | ((@q  >> 24) & 0xff)); };
}
void cspec f3 () { return `{}; }

void cspec i4 () { return `{ q = 0; }; }
void cspec p4 () { 
     return `{ @q = ((@q << 24) | ((@q & 0xff00) << 8) |
		     ((@q >> 8) & 0xff00) | ((@q  >> 24) & 0xff)); };
}
void cspec f4 () { return `{}; }

void cspec i5 () { return `{ q = 0; }; }
void cspec p5 () { 
     return `{ @q = ((@q << 24) | ((@q & 0xff00) << 8) |
		     ((@q >> 8) & 0xff00) | ((@q  >> 24) & 0xff)); };
}
void cspec f5 () { return `{}; }
#endif

/* ====================================================================== */

void I0 () {  return ; }
unsigned P0 (unsigned u) { static unsigned ck; ck += u; return u; }
void F0 () { return; }

void I1 () { return ; }
unsigned P1 (unsigned u) { 
     return ((u << 24) | ((u & 0xff00) << 8) |
	     ((u >> 8) & 0xff00) | ((u  >> 24) & 0xff));
}
void F1 () { return; }

#ifdef largetickc
void I2 () { return ; }
unsigned P2 (unsigned u) { 
     return ((u << 24) | ((u & 0xff00) << 8) |
	     ((u >> 8) & 0xff00) | ((u  >> 24) & 0xff));
}
void F2 () { return; }

void I3 () { return ; }
unsigned P3 (unsigned u) { 
     return ((u << 24) | ((u & 0xff00) << 8) |
	     ((u >> 8) & 0xff00) | ((u  >> 24) & 0xff));
}
void F3 () { return; }

void I4 () { return ; }
unsigned P4 (unsigned u) { 
     return ((u << 24) | ((u & 0xff00) << 8) |
	     ((u >> 8) & 0xff00) | ((u  >> 24) & 0xff));
}
void F4 () { return; }

void I5 () { return ; }
unsigned P5 (unsigned u) { 
     return ((u << 24) | ((u & 0xff00) << 8) |
	     ((u >> 8) & 0xff00) | ((u  >> 24) & 0xff));
}
void F5 () { return; }
#endif
/* ====================================================================== */

void cspec compose(struct pipe *plist, int n) {
     struct pipe *p;
     unsigned cspec result;
     unsigned * vspec input, * vspec output;
     int vspec i, vspec nwords;
     void cspec pipes = `{}; 
     void cspec initial_stmts = `{};
     void cspec final_stmts = `{};

     nwords = param(int, 0);
     input = param(unsigned *, 1);
     output = param(unsigned *, 2);
     i = local( int);
     q = local( unsigned);
     ck = local( unsigned);
     pipes = `{ @q = (@input)[@i]; };
     for (p = &plist[0]; p < &plist[n]; p++) {
	  initial_stmts = `{ @initial_stmts; @p->initial(); };
	  pipes = `{ @pipes; @p->pipe(); };
	  final_stmts = `{ @final_stmts; @p->final(); };
     }
     pipes = `{ @pipes; (@output)[@i] = @q; };
     return `{
	  @initial_stmts;
	  for (@i = 0; @i < @nwords; (@i)++)
	       @pipes;
	  @final_stmts;
     };
}

void filter(struct Pipe *Funcs, int nf, int nel, unsigned *id, unsigned *od) {
     int i,j;
     unsigned k;
     for (i=0;i<nf;i++)
	  ((Vptr)Funcs[i].initial)();
     for (i=0;i<nel;i++) {
	  k = id[i];
	  for (j=0;j<nf;j++)
	       k = ((Uptr)Funcs[j].pipe)(k);
	  od[i] = k;
     }
     for (i=0;i<nf;i++)
	  ((Vptr)Funcs[i].final)();
}

void main(int argc, char **argv) {
     /* dynamic */
     struct pipe funcs[] = { {i0, p0, f0}, {i1, p1, f1},
#ifdef largetickc
			     {i2, p2, f2}, {i3, p3, f3},
			     {i4, p4, f4}, {i5, p5, f5},
#endif
     };
     /* static  */
     struct Pipe Funcs[] = { {I0, P0, F0}, {I1, P1, F1},
#ifdef largetickc
			     {I2, P2, F2}, {I3, P3, F3},
			     {I4, P4, F4}, {I5, P5, F5},
#endif
     };

     unsigned *idata, *odata, n;
     pipetype func, func2;
     int i;

     doargs(argc, argv);
     printf("## cmp2 ##\n");

     idata = (unsigned *)malloc(2*ndata*sizeof(unsigned));
     odata = &idata[ndata];
     for (i=0;i<ndata;i++)
	  idata[i] = random()&0xFF;

     if (optDCG) {
	  func2 = (pipetype)	/* Warm the cache */
	       compile(compose((struct pipe*)funcs,
			       sizeof(funcs)/sizeof(funcs[0])),
		       int);

	  SWON("compilation");
	  for (i=0;i<ncomp;i++) {
	       func = (pipetype)
		    compile(compose((struct pipe*)funcs,
				    sizeof(funcs)/sizeof(funcs[0])),
			    int);
	       decompile(func);
	  }
	  SWOFF;

	  func = func2;
	  if (!func) return;
	  dump(func);

	  (*func)(ndata,idata,odata); /* Warm the cache */
	  SWON("run");
	  for (i=0;i<nruns;i++)
	       (*func)(ndata,idata,odata);
	  SWOFF;
     } else {
	  filter(Funcs,		/* Warm the cache */
		 sizeof(Funcs)/sizeof(Funcs[0]),ndata,idata,odata);
	  SWON("run");
	  for (i=0;i<nruns;i++)
	       filter(Funcs,
		      sizeof(Funcs)/sizeof(Funcs[0]),ndata,idata,odata);
	  SWOFF;
     }

     if (optVerbose) {
	  for (i=0;i<ndata;i++)
	       printf("%d ",idata[i]);
	  printf("\n");
	  for (i=0;i<ndata;i++)
	       printf("%d ",odata[i]);
	  printf("\n");
     }
}
