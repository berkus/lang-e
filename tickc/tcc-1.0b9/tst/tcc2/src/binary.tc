#include <assert.h>
#include "benchmark.h"

/* array from 0..n-1, return position or -1 */
int search(int x[], int n, int key) {
     int l, u, r;

     for(l = 0, u = n-1, r = n / 2; l <= u ; r/=2 ) {
	  int p = u - r;
	  if(x[p] == key) {
	       return p;
	  } else if(x[p] < key) {
	       l = p+1;
	  } else {
	       u = p-1;
	  }	
     }
     return -1;
}

/* recursively gen code to perform binary search. */
void cspec gen(int *x, int vspec key, int l,  int u, int r) {
     int p; 

     /* printf("making with l=%d,u=%d,r=%d\n",l,u,r); */
     if(l > u)
	  return ` { return -1; };

     p = u - r;

     return ` {
	  if($(x[p]) == @key) {
	       return $p;
	  } else if($(x[p]) < @key) {
	       @gen(x, key, p+1, u, r/2);
	  } else {
	       @gen(x, key, l, p-1, r/2);
	  }
     };
}

typedef int (*hash_ptr)(int key);

/* array from 0..n-1, return position or -1 */
hash_ptr mksearch(int n, int *x) {
     int vspec key;

     key = param(int, 0);

     return (hash_ptr)compile(gen(x, key, 0, n-1, n/2), int);
}

main(int argc, char *argv[]) { 
#ifdef largetickc
     int n = 256;
#else
     int n = 16;
#endif
     int *x, i;
     hash_ptr hash, hash2;
     int elem1, elem2;

     doargs(argc, argv);
     printf("## binary ##\n");

     x = (int*)malloc(n*sizeof(int));
     for(i=0;i<n;i++) x[i] = i;
     elem1 = x[n/3]; elem2 = x[2*n/3];

     if (optDCG) {
	  hash2 =  mksearch(n, x); /* Warm the cache */

	  SWON("compilation");
	  for(i = 0; i < ncomp; i++) {
	       hash = mksearch(n, x);
	       decompile(hash);
	  }
	  SWOFF;
	       
	  hash = hash2;
	  if (!hash) return;
	  dump(hash);

	  for(i=0;i<2*n;i++) {
	       unsigned key = random() % (n+100); /* get range + 1 */
	       int pos = search(x,n,key);
	       int dpos = hash(key);

	       if(pos != dpos) {
		    printf("%d for %d: %d != %d\n", i,key,pos,dpos);
	       }
		    
	       if(!((key >= n && pos == -1) || 
		    (key < n && x[pos] == key)))
		    printf("search %d == %d\n",key, pos);
	  }

	  (*hash)(elem1);	/* Warm the cache */
	  SWON("run");
	  nruns /= 3;
	  for(i = 0; i < nruns; i++) {
	       (*hash)(elem1);
	       (*hash)(elem2);
	       (*hash)(1000);
	  }
	  SWOFF;
	  if (optVerbose) {
	       for (i=0; i < n; i++)
		    printf("%d ", x[i]);
	       printf("\n");
	       for (i=-2; i < n+3; i++)
		    printf("%d ", (*hash)(i));
	       printf("\n");
	       for (i=-2; i < n+3; i++)
		    printf("%d ", search(x,n,i));
	       printf("\n");
	  }
     } else {
	  search(x,n,elem1);	/* Warm the cache */
	  SWON("run");
	  nruns /= 3;
	  for(i = 0; i < nruns; i++) {
	       search(x,n,elem1);
	       search(x,n,elem2);
	       search(x,n,1000);
	  }
	  SWOFF;
	  if (optVerbose) {
	       for (i=0; i < n; i++)
		    printf("%d ", x[i]);
	       printf("\n");
	       for (i=-2; i < n+3; i++)
		    printf("%d ", search(x,n,i));
	       printf("\n");
	  }
     }
}
